let withLess = false
let reported = false
const configChain = []
try {
    withLess = require('next-with-less')
    configChain.push(withLess);
} catch (err) {}

const compose = (fns) => x => fns.reduceRight((v, f) => f(v), x);
<%_ if (customNextConfig) { _%>
const customNextConfig = require('./config/next.config.js');

if (customNextConfig.transpilePackages && customNextConfig.transpilePackages.length) {
    try {
        const withTM = require('next-transpile-modules')
        configChain.push(withTM(customNextConfig.transpilePackages))
    } catch (err) {}
}
<%_ } _%>

/** @type {import('next').NextConfig} */
const nextConfig = {
    env: {
        TARO_ENV: 'h5',
    <%_ if (env) {
        Object.keys(env).forEach(function (key) {
            if (key !== 'NODE_ENV') { _%>
        <%- JSON.stringify(key) %>: <%- env[key] %>,
    <%_     }
        })
    } _%>
    },
    sassOptions: {
        <%_ if (additionalData) { _%>
        additionalData: <%- JSON.stringify(additionalData) %>
        <%_ } _%>
    },
    images: {
        disableStaticImages: true
    },
    eslint: {
        ignoreDuringBuilds: true
    },
    <%_ if (rewrites) { _%>
    async rewrites() {
        return {
            beforeFiles:  [
            <%_ rewrites.forEach(function (rewrite) { _%>
                {
                    source: <%- JSON.stringify(rewrite.source) %>,
                    <%_ if (rewrite.has) { _%>
                    has: [
                        <% rewrite.has.forEach(function (item) { %>
                        {
                            type: <%- JSON.stringify(item.type) %>,
                            key: <%- JSON.stringify(item.key) %>,
                            value: <%- JSON.stringify(item.value) %>
                        },
                        <% }) %>
                    ],
                    <%_ } _%>
                    destination: <%- JSON.stringify(rewrite.destination) %>
                },
            <%_ }) _%>
            ]
        }
    },
    <%_ } _%>
    <%_ if (customNextConfig) { _%>
    ...customNextConfig,
    <%_ } _%>
    webpack(config, options) {
        const {isServer, webpack} = options

        if (!isServer && !withLess && !reported) {
            const chalk = require('chalk')
            console.log(chalk.red('\nThe current version of Next.js cannot support Less, please feed back on the issue of github.'))
            reported = true
        }

        config.module.rules.push({
            test: /\.(bmp|gif|jpg|jpeg|png|svg)$/,
            exclude: /node_modules/,
            use: {
                loader: 'url-loader',
                options: {
                    name: '[name].[ext]',
                    limit: 10240, // 1mb
                    publicPath: '/_next/static/',
                    outputPath: `${isServer ? '../' : ''}static/`
                }
            }
        })
        <%_ if (defineConstants) { _%>
        for (let i = 0; i < config.plugins.length; i++) {
            const plugin = config.plugins[i]
            if (plugin.constructor.name === 'DefinePlugin') {
                config.plugins[i] = new webpack.DefinePlugin({
                    <%_ Object.keys(defineConstants).forEach(function (key) { _%>
                    <%- JSON.stringify(key) -%>: <%- JSON.stringify(defineConstants[key]) %>,
                    <%_ }) _%>
                    ...plugin.definitions
                })
            }
        }
        <%_ } _%>

        <%_ if (customNextConfig) { _%>
        if (customNextConfig.webpack) {
            customNextConfig.webpack(config, options)
        }
        <%_ } _%>
        return config
    },
}

module.exports = compose(configChain)(nextConfig)
